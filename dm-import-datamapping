#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-

import getopt
import json
import os
import sys

from hecatoncheir import CSVUtils
from hecatoncheir import DbProfilerRepository
from hecatoncheir import logger as log
from hecatoncheir.msgutil import gettext as _
from hecatoncheir.datamapping import DatamappingItem

datamapper_header = [
    'CHANGE_DATE',
    'DATABASE_NAME',
    'SCHEMA_NAME',
    'TABLE_NAME',
    'COLUMN_NAME',
    'DATA_TYPE',
    'PK',
    'NULLABLE',
    'SOURCE_DATABASE_NAME',
    'RECORD_ID',
    'SOURCE_SCHEMA_NAME',
    'SOURCE_TABLE_NAME',
    'SOURCE_COLUMN_NAME',
    'TRANSFORMATION_CATEGORY',
    'TRANSFORMATION_ROLE',
    'UPDATED_BY']


def usage():
    print '''
Usage: %s [repo file] [csv file]

Options:
    -E, --encoding=STRING      Encoding of the CSV file (default: sjis)
    --help                     Print this help.

''' % os.path.basename(sys.argv[0])

file_enc = 'sjis'


def comp_ent(e1, e2):
    return e1 == e2

if __name__ == "__main__":
    try:
        opts, args = getopt.getopt(sys.argv[1:], "E:",
                                   ["encoding=", "help", "debug"])
    except getopt.GetoptError as err:
        log.error(unicode(err))
        usage()
        sys.exit(1)

    for o, a in opts:
        if o in ("--debug"):
            log.debug_enabled = True
        elif o in ("-E"):
            file_enc = a
        elif o in ("--encoding"):
            file_enc = a
        elif o in ("--help"):
            usage()
            sys.exit(0)
        else:
            log.error("unexpected option. internal error.")
            sys.exit(1)

    if len(args) < 2:
        usage()
        sys.exit(1)

    input_file = args[0]
    csv_file = args[1]

    log.info(_("Importing csv file `%s' into the repository `%s'.") %
             (csv_file, input_file))

    try:
        reader = CSVUtils.CSVReader(csv_file)
        if reader.check_header(datamapper_header) is False:
            log.error(_("Unsupported csv format."))
            sys.exit(1)
    except Exception as e:
        log.error(_("Could not open csv file `%s'.") % csv_file,
                  detail=unicode(e))
        sys.exit(1)

    repo = DbProfilerRepository.DbProfilerRepository(input_file)
    repo.open()

    merged = 0
    for lines, r in enumerate(reader.readline_as_dict(use_lower=True)):
        ent = r
        ent['lineno'] = lines + 1

        entries = DatamappingItem.find(record_id=ent['record_id'],
                                       database_name=ent['database_name'],
                                       schema_name=ent['schema_name'],
                                       table_name=ent['table_name'],
                                       column_name=ent['column_name'])
        if len(entries) == 0:
            log.info(_("Creating data mapping item: %s.%s.%s.%s.%s") %
                     (ent['database_name'], ent['schema_name'],
                      ent['table_name'],
                      ent['column_name'], ent['record_id']))

            item = DatamappingItem.create(ent['record_id'],
                                          ent['database_name'],
                                          ent['schema_name'],
                                          ent['table_name'],
                                          ent['column_name'],
                                          ent['source_database_name'],
                                          ent['source_schema_name'],
                                          ent['source_table_name'],
                                          ent['source_column_name'],
                                          ent)
            if item:
                merged += 1
        else:
            log.info(_("Updating data mapping item: %s.%s.%s.%s.%s") %
                     (ent['database_name'], ent['schema_name'],
                      ent['table_name'],
                      ent['column_name'], ent['record_id']))

            item = entries[0]
            item.source_database_name = ent['source_database_name']
            item.source_schema_name = ent['source_schema_name']
            item.source_table_name = ent['source_table_name']
            item.source_column_name = ent['source_column_name']
            item.data = ent
            if item.update():
                merged += 1

    log.info(_("Read %d lines") % (lines + 1))
    log.info(_("%d mappings imported.") % merged)

    repo.close()

    sys.exit(0)
